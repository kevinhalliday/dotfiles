# Configuration for Alacritty, the GPU enhanced terminal emulator


# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty it self.
env:
  # TERM env customization.
  #
  # If this property is not set, alacritty will set it to xterm-256color.
  #
  # Note that some xterm terminfo databases don't declare support for italics.
  # You can verify this by checking for the presence of `smso` and `sitm` in
  # `infocmp xterm-256color`.
  TERM: xterm-256color

window:
  opacity: 1.0

  dynamic_title: true

  # Window dimensions in character columns and lines
  # (changes require restart)
  dimensions:
    columns: 80
    lines: 24

  # Adds this many blank pixels of padding around the window
  # Units are physical pixels; this is not DPI aware.
  # (change requires restart)
  padding:
    x: 2
    y: 2

  # Window decorations
  # Setting this to none will result in window without borders and title bar.
  decorations: full

# The FreeType rasterizer needs to know the device DPI for best results
# (changes require restart)
dpi:
  x: 96.0
  y: 96.0

# Display tabs using this many cells (changes require restart)
# tabspaces: 8

# When true, bold text is drawn using the bright variant of colors.
draw_bold_text_with_bright_colors: true

# Font configuration (changes require restart)
font:
  normal:
    family: FiraCode Nerd Font
    style: Regular
  bold:
    family: FiraCode Nerd Font
    style: Bold
  italic:
    family: Hack Nerd Font
    style: Italic
  size: 12.0

  # Offset is the extra space around each character. offset.y can be thought of
  # as modifying the linespacing, and offset.x as modifying the letter spacing.
  offset:
    x: 0
    y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increase the x offset to move the glyph to
  # the right, increase the y offset to move the glyph upward.
  glyph_offset:
    x: 0
    y: 0

  # OS X only: use thin stroke font rendering. Thin strokes are suitable
  # for retina displays, but for non-retina you probably want this set to
  # false.
  use_thin_strokes: true

debug:
  # Should display the render timer
  render_timer: false

cursor:
  # Cursor style
  #
  # Values for 'cursor.style':
  #   - Block
  #   - Underline
  #   - Beam
  style: Block

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  unfocused_hollow: true

colors:
  # https://github.com/tanvirtin/monokai.nvim/blob/master/extras/alacritty/monokai_classic.yml
  primary:
    background: '#272822'
    foreground: '#F8F8F2'

  normal:
   black:   '#272822'
   red:     '#F92672'
   green:   '#A6E22E'
   yellow:  '#F4BF75'
   blue:    '#66D9EF'
   magenta: '#AE81FF'
   cyan:    '#A1EFE4'
   white:   '#F8F8F2'

  bright:
   black:   '#75715E'
   red:     '#F92672'
   green:   '#A6E22E'
   yellow:  '#F4BF75'
   blue:    '#66D9EF'
   magenta: '#AE81FF'
   cyan:    '#A1EFE4'
   white:   '#F9F8F5'

  # https://github.com/tanvirtin/monokai.nvim/blob/master/extras/alacritty/monokai_soda.yml
  # primary:
  #   background: '#1a1a1a'
  #   foreground: '#c4c5b5'

  # normal:
  #   black:   '#1a1a1a'
  #   red:     '#f4005f'
  #   green:   '#98e024'
  #   yellow:  '#fa8419'
  #   blue:    '#9d65ff'
  #   magenta: '#f4005f'
  #   cyan:    '#58d1eb'
  #   white:   '#c4c5b5'

  # bright:
  #   black:   '#625e4c'
  #   red:     '#f4005f'
  #   green:   '#98e024'
  #   yellow:  '#e0d561'
  #   blue:    '#9d65ff'
  #   magenta: '#f4005f'
  #   cyan:    '#58d1eb'
  #   white:   '#f6f6ef'

  # https://github.com/tanvirtin/monokai.nvim/blob/master/extras/alacritty/monokai_pro.yml
  # primary:
  #   background: '#2D2A2E'
  #   foreground: '#FCFCFA'

  # normal:
  #   black:   '#403E41'
  #   red:     '#FF6188'
  #   green:   '#A9DC76'
  #   yellow:  '#FFD866'
  #   blue:    '#FC9867'
  #   magenta: '#AB9DF2'
  #   cyan:    '#78DCE8'
  #   white:   '#FCFCFA'

  # bright:
  #   black:   '#727072'
  #   red:     '#FF6188'
  #   green:   '#A9DC76'
  #   yellow:  '#FFD866'
  #   blue:    '#FC9867'
  #   magenta: '#AB9DF2'
  #   cyan:    '#78DCE8'
  #   white:   '#FCFCFA'

bell:
  animation: EaseOutExpo
  duration: 0

scrolling:
  # How many lines of scrollback to keep,
  # '0' will disable scrolling.
  history: 10000

  # Number of lines the viewport will move for every line
  # scrolled when scrollback is enabled (history > 0).
  multiplier: 3

  # Automatically scroll to the bottom when new text is written
  # to the terminal.
  # auto_scroll: false

# Mouse bindings
#
# Currently doesn't support modifiers. Both the `mouse` and `action` fields must
# be specified.
#
# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# Values for `action`:
# - Paste
# - PasteSelection
# - Copy (TODO)
mouse_bindings:
  - {mouse: Middle, action: PasteSelection}

mouse:
  double_click: {threshold: 300}
  triple_click: {threshold: 300}
  hints:
    launcher: xdg-open
    modifiers: Shift
  hide_when_typing: false


selection:
  semantic_escape_chars: ",â”‚`|:\"' ()[]{}<>"

# Live config reload (changes require restart)
live_config_reload: true


# Shell
#
# You can set shell.program to the path of your favorite shell, e.g. /bin/fish.
# Entries in shell.args are passed unmodified as arguments to the shell.
shell:
  # program: /usr/bin/zsh
  # program: /usr/local/bin/zsh
  program: /bin/zsh
  args:
    - --login

# Key bindings
#
# Key bindings are specified as a list of objects. Each binding will specify
# a key and modifiers required to trigger it, terminal modes where the binding
# is applicable, and what should be done when the key binding fires. It can
# either send a byte sequnce to the running application (`chars`), execute
# a predefined action (`action`) or fork and execute a specified command plus
# arguments (`command`).
#
# Example:
#   `- { key: V, mods: Command, action: Paste }`
#
# Available fields:
#   - key
#   - mods (optional)
#   - chars | action | command (exactly one required)
#   - mode (optional)
#
# Values for `key`:
#   - `A` -> `Z`
#   - `F1` -> `F12`
#   - `Key1` -> `Key0`
#
#   A full list with available key codes can be found here:
#   https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
#   Instead of using the name of the keys, the `key` field also supports using
#   the scancode of the desired key. Scancodes have to be specified as a
#   decimal number.
#   This command will allow you to display the hex scancodes for certain keys:
#     `showkey --scancodes`
#
# Values for `mods`:
#   - Command
#   - Control
#   - Shift
#   - Alt
#
#   Multiple `mods` can be combined using `|` like this: `mods: Control|Shift`.
#   Whitespace and capitalization is relevant and must match the example.
#
# Values for `chars`:
#   The `chars` field writes the specified string to the terminal. This makes
#   it possible to pass escape sequences.
#   To find escape codes for bindings like `PageUp` ("\x1b[5~"), you can run
#   the command `showkey -a` outside of tmux.
#   Note that applications use terminfo to map escape sequences back to
#   keys. It is therefore required to update the terminfo when
#   changing an escape sequence.
#
# Values for `action`:
#   - Paste
#   - PasteSelection
#   - Copy
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Quit
#
# Values for `command`:
#   The `command` field must be a map containing a `program` string and
#   an `args` array of command line parameter strings.
#
#   Example:
#       `command: { program: "alacritty", args: ["-e", "vttest"] }`
#
# Values for `mode`:
#   - ~AppCursor
#   - AppCursor
#   - ~AppKeypad
#   - AppKeypad
key_bindings:
  - {key: V, mods: Control|Shift, action: Paste}
  - {key: C, mods: Control|Shift, action: Copy}
  - {key: Paste, action: Paste}
  - {key: Copy, action: Copy}
  - {key: Q, mods: Command, action: Quit}
  - {key: W, mods: Command, action: Quit}
  - {key: Insert, mods: Shift, action: PasteSelection}
  - {key: Home, chars: "\eOH", mode: AppCursor}
  - {key: Home, chars: "\e[H", mode: ~AppCursor}
  - {key: Home, mods: Shift, action: ScrollToTop}
  - {key: End, chars: "\eOF", mode: AppCursor}
  - {key: End, chars: "\e[F", mode: ~AppCursor}
  - {key: PageUp, mods: Control, chars: "\e[5;5~"}
  - {key: PageUp, mods: Shift, action: ScrollPageUp}
  - {key: PageUp, chars: "\e[5~"}
  - {key: PageDown, mods: Control, chars: "\e[6;5~"}
  - {key: PageDown, mods: Shift, action: ScrollPageDown}
  - {key: PageDown, chars: "\e[6~"}
  - {key: End, mods: Shift, action: ScrollToBottom}
  - {key: Left, mods: Shift, chars: "\e[1;2D"}
  - {key: Left, mods: Control, chars: "\e[1;5D"}
  - {key: Left, mods: Alt, chars: "\e[1;3D"}
  - {key: Left, chars: "\e[D", mode: ~AppCursor}
  - {key: Left, chars: "\eOD", mode: AppCursor}
  - {key: Right, mods: Shift, chars: "\e[1;2C"}
  - {key: Right, mods: Control, chars: "\e[1;5C"}
  - {key: Right, mods: Alt, chars: "\e[1;3C"}
  - {key: Right, chars: "\e[C", mode: ~AppCursor}
  - {key: Right, chars: "\eOC", mode: AppCursor}
  - {key: Up, mods: Shift, chars: "\e[1;2A"}
  - {key: Up, mods: Control, chars: "\e[1;5A"}
  - {key: Up, mods: Alt, chars: "\e[1;3A"}
  - {key: Up, chars: "\e[A", mode: ~AppCursor}
  - {key: Up, chars: "\eOA", mode: AppCursor}
  - {key: Down, mods: Shift, chars: "\e[1;2B"}
  - {key: Down, mods: Control, chars: "\e[1;5B"}
  - {key: Down, mods: Alt, chars: "\e[1;3B"}
  - {key: Down, chars: "\e[B", mode: ~AppCursor}
  - {key: Down, chars: "\eOB", mode: AppCursor}
  - {key: Tab, mods: Shift, chars: "\e[Z"}
  - {key: F1, chars: "\eOP"}
  - {key: F2, chars: "\eOQ"}
  - {key: F3, chars: "\eOR"}
  - {key: F4, chars: "\eOS"}
  - {key: F5, chars: "\e[15~"}
  - {key: F6, chars: "\e[17~"}
  - {key: F7, chars: "\e[18~"}
  - {key: F8, chars: "\e[19~"}
  - {key: F9, chars: "\e[20~"}
  - {key: F10, chars: "\e[21~"}
  - {key: F11, chars: "\e[23~"}
  - {key: F12, chars: "\e[24~"}
  - {key: Back, chars: "\x7F"}
  - {key: Back, mods: Alt, chars: "\e\x7F"}
  - {key: Insert, chars: "\e[2~"}
  - {key: Delete, chars: "\e[3~"}
  - {key: Equals, mods: Control, action: IncreaseFontSize}
  - {key: Minus, mods: Control, action: DecreaseFontSize}
  - {key: Key0, mods: Control, action: ResetFontSize}
